plugins {
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'java'
    id 'org.sonarqube' version '4.4.0.3356'

}

group = 'com.hegde'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

//Apply these properties to all sub-projects
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation('org.springframework.boot:spring-boot-starter-validation')

        //Java Persistence API.
        implementation('org.springframework.boot:spring-boot-starter-data-jpa')

        //Logging
        implementation('ch.qos.logback:logback-core')
        implementation('ch.qos.logback:logback-classic')

        //Spring security
        implementation('org.springframework.boot:spring-boot-starter-security')
        implementation('org.springframework.boot:spring-boot-starter-oauth2-client')

        //Actuator
        implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '3.1.5'
        implementation group: 'org.springframework.data', name: 'spring-data-rest-hal-browser', version: '3.3.9.RELEASE'

        //MapStruct
        implementation 'org.mapstruct:mapstruct:1.4.2.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
        annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

        //Tracing Context Propagation
        implementation('io.micrometer:micrometer-tracing-bridge-brave')
        //Latency visualization. TODO : Explore this
        implementation('io.zipkin.reporter2:zipkin-reporter-brave')


        runtimeOnly('com.mysql:mysql-connector-j')
        compileOnly('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')
        testCompileOnly('org.projectlombok:lombok')
        testAnnotationProcessor('org.projectlombok:lombok')
        developmentOnly('org.springframework.boot:spring-boot-devtools')
        testImplementation('org.springframework.boot:spring-boot-starter-test')
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000' // Replace with your SonarQube server URL
        property 'sonar.login', 'your_sonarqube_token' // Replace with your SonarQube access token
    }
}